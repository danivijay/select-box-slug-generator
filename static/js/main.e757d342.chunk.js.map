{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","input","setinput","_useState3","_useState4","outputObj","setoutputObj","_useState5","_useState6","outputSelectboxVal","setoutputSelectboxVal","_useState7","_useState8","outputKeyArr","setoutputKeyArr","_useState9","_useState10","outputHash","setoutputHash","react_default","a","createElement","className","bloomer_min","isCentered","isSize","style","marginTop","type","placeholder","value","onChange","e","target","isGrouped","isColor","isFullWidth","onClick","inputArr","split","outputObjArr","selectboxOptionsArr","outputKeyArrVals","outputHashArr","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","item","key","slug","toLowerCase","trim","itemObj","push","concat","err","return","JSON","stringify","join","readOnly","isOutlined","scroll","scrollToTop","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e757d342.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport slug from 'slug';\nimport { Columns, Column, Box, Label, Control, TextArea, Input, Field, Button, Title, Icon } from 'bloomer';\nimport { animateScroll as scroll } from 'react-scroll';\n\nimport 'bulma/css/bulma.css';\n\nconst App = () => {\n      const [input, setinput] = useState('');\n      const [outputObj, setoutputObj] = useState('');\n      const [outputSelectboxVal, setoutputSelectboxVal] = useState('');\n      const [outputKeyArr, setoutputKeyArr] = useState('');\n      const [outputHash, setoutputHash] = useState('');\n\n      const handleConvert = () => {\n            const inputArr = input.split(',');\n            const outputObjArr = [];\n            const selectboxOptionsArr = [];\n            const outputKeyArrVals = [];\n            const outputHashArr = [];\n            for (let item of inputArr) {\n                  const key = slug(item, '_')\n                        .toLowerCase()\n                        .trim();\n                  const value = item.trim();\n                  const itemObj = { key, value };\n                  selectboxOptionsArr.push(`<option value='${key}'>${value}</option>`);\n                  outputObjArr.push(itemObj);\n                  outputKeyArrVals.push(key);\n                  outputHashArr.push(`\"${key}\" => \"${value}\"`);\n            }\n            setoutputObj(JSON.stringify(outputObjArr));\n            setoutputSelectboxVal(`<select name=\"\">${selectboxOptionsArr.join('')}<select>`);\n            setoutputKeyArr(JSON.stringify(outputKeyArrVals));\n            setoutputHash(`{ ${outputHashArr.join(', ')} }`);\n      };\n\n      const handleReset = () => {\n            setinput('');\n            setoutputObj('');\n            setoutputSelectboxVal('');\n      };\n\n      return (\n            <div className=\"App\">\n                  <Columns isCentered>\n                        <Column isSize=\"2/3\" style={{ marginTop: '10px' }}>\n                              <Box>\n                                    <Title>Array Converter</Title>\n                                    <Field>\n                                          <Label>Elements (separated by comma)</Label>\n                                          <Control>\n                                                <Input\n                                                      type=\"text\"\n                                                      placeholder=\"Eg: Bread Butter, Orange Milk\"\n                                                      value={input}\n                                                      onChange={(e) => setinput(e.target.value)}\n                                                />\n                                          </Control>\n                                    </Field>\n                                    <Field isGrouped>\n                                          <Button isColor=\"primary\" isFullWidth onClick={handleConvert}>\n                                                Convert\n                                          </Button>\n                                    </Field>\n                                    <Field isGrouped>\n                                          <Button isColor=\"warning\" isFullWidth onClick={handleReset}>\n                                                Reset\n                                          </Button>\n                                    </Field>\n                                    <Field>\n                                          <Label>Keys</Label>\n                                          <Control>\n                                                <Input type=\"text\" placeholder={`[\"bread_butter\",\"orange_milk\"]`} value={outputKeyArr} />\n                                          </Control>\n                                    </Field>\n                                    <Field>\n                                          <Label>Object</Label>\n                                          <Control>\n                                                <TextArea\n                                                      placeholder={`[{\"key\":\"bread_butter\",\"value\":\"Bread Butter\"},{\"key\":\"orange_milk\",\"value\":\"Orange Milk\"}]`}\n                                                      value={outputObj}\n                                                      readOnly\n                                                />\n                                          </Control>\n                                    </Field>\n                                    <Field>\n                                          <Label>Selectbox</Label>\n                                          <Control>\n                                                <TextArea\n                                                      placeholder={`<select name=\"\"><option value='bread_butter'>Bread Butter</option><option value='orange_milk'>Orange Milk</option><select>`}\n                                                      value={outputSelectboxVal}\n                                                      readOnly\n                                                />\n                                          </Control>\n                                    </Field>\n                                    <Field>\n                                          <Label>Hash</Label>\n                                          <Control>\n                                                <TextArea\n                                                      placeholder={`{ \"bread_butter\" => \"Bread Butter\", \"orange_milk\" => \"Orange Milk\" }`}\n                                                      value={outputHash}\n                                                      readOnly\n                                                />\n                                          </Control>\n                                    </Field>\n                              </Box>\n                              <Button isColor=\"success\" isOutlined onClick={scroll.scrollToTop}>\n                                    <Icon className=\"fas fa-arrow-up\" />\n                              </Button>\n                        </Column>\n                  </Columns>\n            </div>\n      );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}